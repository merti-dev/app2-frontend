name: Build & Deploy app2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: app2-deploy
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Build (base-href /app2/) and package
        run: |
          set -euxo pipefail
          # Projede build script'i varsa onu kullan, yoksa ng:
          if npm run | grep -q "^  build"; then
            npm run build -- --base-href /app2/
          else
            npx ng build --base-href /app2/
          fi

          # Angular Ã§Ä±ktÄ± klasÃ¶rÃ¼nÃ¼ tespit et
          APP_DIR=$(ls -d dist/* | head -n1)
          if [ -d "$APP_DIR/browser" ]; then
            OUT="$APP_DIR/browser"
          else
            OUT="$APP_DIR"
          fi

          test -f "$OUT/index.html"
          tar -C "$OUT" -czf web.tar.gz .
          echo "Packaged from: $OUT"
          ls -lah web.tar.gz
          find "$OUT" -maxdepth 1 -type f -name "index.html" -print
          find "$OUT" -maxdepth 1 -type f -name "main*.js" -print || true

      # ðŸ”‘ Private key'i SSH agent'a yÃ¼kle (appleboy yerine kendi scp/ssh'Ä±mÄ±zÄ± kullanacaÄŸÄ±z)
      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Upload web.tar.gz via scp
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -euxo pipefail
          : "${SSH_HOST:?Missing SSH_HOST secret}"
          : "${SSH_USER:?Missing SSH_USER secret}"
          PORT="${SSH_PORT:-22}"
          # Host key check'i devre dÄ±ÅŸÄ± (istersen known_hosts ekleyebilirsin)
          scp -P "$PORT" -o StrictHostKeyChecking=no web.tar.gz "$SSH_USER@$SSH_HOST:/root/deploy-app2/web.tar.gz"

      - name: Deploy on server via ssh
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -euxo pipefail
          PORT="${SSH_PORT:-22}"
          ssh -p "$PORT" -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" 'bash -s' <<'REMOTE'
            set -euxo pipefail
            sudo mkdir -p /usr/share/app2/live
            TMP_DIR=$(mktemp -d)
            tar -xzf /root/deploy-app2/web.tar.gz -C "$TMP_DIR"
            sudo rsync -a --delete "$TMP_DIR"/ /usr/share/app2/live/
            rm -rf "$TMP_DIR"
            sudo find /usr/share/app2/live -type d -exec chmod 755 {} \;
            sudo find /usr/share/app2/live -type f -exec chmod 644 {} \;
            sudo nginx -t
            sudo systemctl reload nginx
REMOTE
